arranged_data <- arrange(data, air_delay)
View(data)
# Use `dplyr` to give the data frame a new column that is the amount of time
# gained or lost while flying (that is: how much of the delay arriving occured
# during flight, as opposed to before departing).
data <- mutate(data, "air_delay" = dep_delay - arr_delay)
# Use `dplyr` to sort your data frame in descending order by the column you just
# created. Remember to save this as a variable (or in the same one!)
arranged_data <- arrange(data, air_delay)
# For practice, repeat the last 2 steps in a single statement using the pipe
# operator. You can clear your environmental variables to "reset" the data frame
pipe_data <- data %>%
mutate("air_delay" = dep_delay - arr_delay) %>%
arrange(air_delay)
library(pscl)
outcome <- presidentialElections %>%
select(-south) %>%
mutate(year = paste0("demVote_", year)) %>%
spread(key = year, value = demVote)
install.packages(pscl)
install.packages("pscl")
outcome <- presidentialElections %>%
select(-south) %>%
mutate(year = paste0("demVote_", year)) %>%
spread(key = year, value = demVote)
library(pscl)
outcome <- presidentialElections %>%
select(-south) %>%
mutate(year = paste0("demVote_", year)) %>%
spread(key = year, value = demVote)
library(dplyr)
outcome <- presidentialElections %>%
select(-south) %>%
mutate(year = paste0("demVote_", year)) %>%
spread(key = year, value = demVote)
library(tidyr)
install.packages("tidey-er")
install.packages("tidyr")
library(tidyr)
outcome <- presidentialElections %>%
select(-south) %>%
mutate(year = paste0("demVote_", year)) %>%
spread(key = year, value = demVote)
View(outcome)
library(nycflights13)
flights
View(flights)
test <- flights %>%
gather(key = dest, value = arr_delay)
View(test)
test <- flights %>%
select(arr_delay,dest)
View(test)
test <- flights %>%
select(arr_delay,dest) %>%
group_by(dest)
View(test)
library(nycflights13)
View(test)
test <- flights %>%
select(arr_delay,dest) %>%
arrange(dest)
View(test)
library(nycflights13)
test <- flights %>%
select(arr_delay,dest) %>%
arrange(dest) %>%
group_by(dest)
View(test)
test <- flights %>%
select(arr_delay,dest) %>%
arrange(dest) %>%
mutate(mean = mean(group_by(dest)))
test <- flights %>%
select(arr_delay,dest) %>%
arrange(dest) %>%
spread(key = dest, value = arr_delay)
View(test)
test <- flights %>%
select(arr_delay,dest) %>%
arrange(dest) %>%
spread(key = arr_delay, value = dest)
test <- flights %>%
select(arr_delay,dest) %>%
arrange(dest) %>%
spread(key = dest)
test <- flights %>%
select(arr_delay,dest) %>%
arrange(dest) %>%
mutate(avr <- mean(arr_delay))
View(test)
test <- flights %>%
select(arr_delay,dest) %>%
arrange(dest) %>%
mutate(avr <- mean(arr_delay)) %>%
arrange(avr)
test <- flights %>%
select(arr_delay,dest) %>%
arrange(dest) %>%
mutate(avr = mean(arr_delay)) %>%
arrange(avr)
View(test)
test <- flights %>%
select(arr_delay,dest) %>%
#arrange(dest) %>%
mutate(avr = mean(arr_delay)) %>%
arrange(avr)
View(test)
test <- flights %>%
select(arr_delay,dest) %>%
#arrange(dest) %>%
mutate(avr = na.omit(mean(arr_delay))) %>%
arrange(avr)
test <- flights %>%
select(arr_delay,dest) %>%
View(test)
test <- flights %>%
select(arr_delay,dest) %>%
library(nycflights13)
test <- flights %>%
select(arr_delay,dest)
test <- flights %>%
select(arr_delay,dest) %>%
mutate(avr = mean(group_by(dest)))
test <- flights %>%
select(arr_delay,dest) %>%
mutate(avr = mean(group_by(arr_delay)))
group_by(dest)
group_by(flights$dest)
test <- flights %>%
group_by(dest) %>%
summarize(avg = mean()) %>%
filter(avg == max(avg)) %>%
select(dest)
test <- flights %>%
group_by(dest) %>%
summarize(avg = mean(arr_delay)) %>%
filter(avg == max(avg)) %>%
select(dest)
View(test)
test <- flights %>%
group_by(dest) %>%
filter(arr_delay > 0) %>%
summarize(avg = mean(arr_delay)) %>%
filter(avg == max(avg)) %>%
select(dest)
View(test)
View(test)
library(ggplot2)
df <- data.frame(
label = c("A", "B", "C", "D"),
value = 1:4,
stringsAsFactors = F
)
ggplot(df) +
geom_col(mapping = aes(x = label, y = value, fill = "blue"))
install.packages('ggplot2')
library(ggplot2)
df <- data.frame(
label = c("A", "B", "C", "D"),
value = 1:4,
stringsAsFactors = F
)
ggplot(df) +
geom_col(mapping = aes(x = label, y = value, fill = "blue"))
library(ggplot2)
df <- data.frame(
label = c("A", "B", "C", "D"),
value = 1:4,
stringsAsFactors = F
)
ggplot(df) +
geom_col(mapping = aes(x = label, y = value, fill = blue))
library(ggplot2)
df <- data.frame(
label = c("A", "B", "C", "D"),
value = 1:4,
stringsAsFactors = F
)
ggplot(df) +
geom_col(mapping = aes(x = label, y = value, fill = 'blue'))
# Load packages
library("dplyr")
library("ggmap")
library("ggplot2")
# Load data from GitHub
permit_data <- read.csv(
"https://raw.githubusercontent.com/programming-for-data-science/in-action/master/interactive-vis/data/Building_Permits.csv",
stringsAsFactors = F)
# Load packages
library("dplyr")
library("ggmap")
install.packages('ggmap')
library("ggmap")
library("ggplot2")
# Load data from GitHub
permit_data <- read.csv(
"https://raw.githubusercontent.com/programming-for-data-science/in-action/master/interactive-vis/data/Building_Permits.csv",
stringsAsFactors = F)
# Formatting and filtering data
samp <- permit_data %>%
filter(!is.na(Longitude), !is.na(Latitude), Longitude <0, Latitude < 100) %>%
filter(PermitTypeDesc == "New") %>%
mutate(year = as.numeric(substr(IssuedDate, 1, 4))) %>%
filter(year > 2010)
# Load data from GitHub
permit_data <- read.csv(
"https://raw.githubusercontent.com/programming-for-data-science/in-action/master/interactive-vis/data/Building_Permits.csv",
stringsAsFactors = F)
# Formatting and filtering data
samp <- permit_data %>%
filter(!is.na(Longitude), !is.na(Latitude), Longitude <0, Latitude < 100) %>%
filter(PermitTypeDesc == "New") %>%
mutate(year = as.numeric(substr(IssuedDate, 1, 4))) %>%
filter(year > 2010)
# Chart option 1: years as categories
qmplot(
data = samp,
x = Longitude,
y = Latitude,
color = as.character(year)
) + scale_color_discrete() +
labs(color = "Year")
# Chart option 2: years as continuous
qmplot(
data = samp,
x = Longitude,
y = Latitude,
color = year
) + scale_color_continuous() +
labs(color = "Year")
install.packages("rsconnect")
install.packages("Rtools")
library(ggplot2)
library(dplyr)
library(leaflet)
library(plotly)
# load in data frame (from ggplot package)
mid_data <- data.frame(midwest) %>%
na.omit()
poverty_college_plot <- function (xcoll, ycoll, color) {
result <- plot_ly(
data = mid_data,
x = ~mid_data[[xcoll]],
y = ~mid_data[[ycoll]],
type = "scatter",
mode = "markers",
color = ~mid_data[[color]]
) %>%
layout(
xaxis = list(title = xcoll),
yaxis = list(title = ycoll)
)
}
get_pov_col <- function(xcoll, ycoll, color) {
return(poverty_college_plot(xcoll, ycoll, color))
}
states <- subset(mid_data, mid_data$)
library(textreadr)
summary_txt <- stri_read_lines("words/SummaryPage.html")
summary_html <- HTML(summary_txt)
View(mid_data)
states <- subset(mid_data, mid_data$state)
states <- mid_data %>%
group_by(state) %>%
select(state)
View(states)
states <- mid_data %>%
unique(state)
states <- mid_data %>%
group_by(state) %>%
select(unique())
states <- mid_data %>%
group_by(state) %>%
select(unique(state))
states <- mid_data %>%
group_by(state) %>%
select(unique(1))
states <- mid_data %>%
group_by(state) %>%
summarise()
View(states)
states <- mid_data %>%
group_by(state) %>%
summarise()
leaflet(states) %>%
addPolygons(color = "red", weight = 1, smoothFactor = .5,
opacity = 1, fillOpacity = .5)
library(ggmap)
library(ggmap2)
library(ggmap)
mid_map <- qmap(location = "Midwest, United States")
mid_map <- qmap(location = "Midwest, United States", source = "google")
google_key <- AIzaSyDT7k0-QZ5BhWjvra0m1YvHCgUlKWjLyYY
google_key <- AIzaSyDT7k0-QZ5BhWjvra0m1YvHCgUlKWjLyYY
google_key <- "AIzaSyDT7k0-QZ5BhWjvra0m1YvHCgUlKWjLyYY"
("api_keys.R")
register_google(key = google_key, write = T)
GGMAP_GOOGLE_API_KEY='AIzaSyDT7k0-QZ5BhWjvra0m1YvHCgUlKWjLyYY"
GGMAP_GOOGLE_API_KEY='AIzaSyDT7k0-QZ5BhWjvra0m1YvHCgUlKWjLyYY"
GGMAP_GOOGLE_API_KEY <- "AIzaSyDT7k0-QZ5BhWjvra0m1YvHCgUlKWjLyYY"
mid_map <- qmap(location = "Midwest, United States", source = "google")
mid_map <- qmap(location = "Midwest, United States", source = "google")
mid_map <- get_map(location = "Midwest, United States", source = "google")
mid_map <- get_map(location = "Midwest, United States", source = "google", zoom = 3)
mid_map <- get_map(location = "texas", source = "google", zoom = 3)
# shinyApp object to be run with app_server.R and app_ui.R
shinyApp(server = my_server, ui = my_ui)
install.packages("googlesheets")
library(googlesheets)
gs_auth(new_user = T)
install.packages("googlesheets4")
library(googlesheets4)
sheets_auth(email = "graueryan@gmail.com")
detach("package:googlesheets", unload = TRUE)
sheets_browse()
library(googledrive)
sheets_browse("test")
sheets_browse("test")
sheets_browse("https://docs.google.com/spreadsheets/d/1f6_ReC-uxhX1_fH1WUSTbIRhf7bmDT4kZGdsbyCt7d4/edit#gid=0")
data <- sheets_read("https://docs.google.com/spreadsheets/d/1f6_ReC-uxhX1_fH1WUSTbIRhf7bmDT4kZGdsbyCt7d4/edit#gid=0")
is.data.frame(data)
shiny::runApp('C:/Users/graue/Info201/Final/final-coop28')
shiny::runApp('C:/Users/graue/projects/internship/internship-proposal')
runApp('C:/Users/graue/projects/internship/internship-proposal')
runApp('C:/Users/graue/projects/internship/internship-proposal')
tabItems(
tabItem(tabName = "Home",
includeHTML("text/intro_text.html")
),
tabItem(tabName = "report",
withMathJax(includeMarkdown("report.md")),
renderPlotly(item_sale_visual),
withMathJax(includeMarkdown("report_bottom.md"))
),
tabItem(tabName = "projects",
fluidPage(
tags$head(
tags$style("font_size: 45px;")
),
tagList(a("Weather Data (Info 201 Final project)",
href = "https://rgraue-1674915.shinyapps.io/Weather_Data_app/")),
br(),
tagList(a("Midpoint for Project, hosted though Github",
href = "https://info201b-au19.github.io/final-coop28/")),
br(),
tagList(a("Project Geoff (an idea that one of the ski techs had... so I made it come true)",
href = "https://rgraue-1674915.shinyapps.io/Geoff/")),
br(),
tagList(a("Code for this proposal (git download)",
href = "https://github.com/rgraue-1674915/internship-proposal.git")),
br(),
tagList(a("school projects",
href = "https://github.com/rgraue-1674915/school-projects.git"))
)
),
tabItem(tabName = "school",
includeHTML("text/school.html"),
renderImage({
list(src = "imgs/transcript.PNG",
contentType = "image/png",
alt = "Transcript")
}, deleteFile = F)
),
tabItem(tabName = "about",
includeHTML("text/about_me.html"),
img(src = "imgs/fam.jpg")
)
)
runApp('C:/Users/graue/projects/internship/internship-proposal')
runApp('C:/Users/graue/projects/internship/internship-proposal')
runApp('C:/Users/graue/projects/internship/internship-proposal')
runApp('C:/Users/graue/projects/internship/internship-proposal')
shiny::runApp('C:/Users/graue/projects/internship/internship-proposal')
runApp('C:/Users/graue/projects/internship/internship-proposal')
canPingSite <- function(test.site) {
!as.logical(system(paste("ping", test.site)))
}
canPingSite("dfghjkl")
canPingSite("google.com")
connected <- !as.logical(system(paste("google.com", test.site)))
connected <- !as.logical(system(paste("google.com")))
connected <- !as.logical(system(paste("ping","google.com")))
# retrieves data from mongdb database if connected
if (connected) {
sale <- mongo(collection = "sale", url = "mongodb+srv://rgraue:LoopDLoop@geoffcluster-3sd9t.azure.mongodb.net/report")
custy <- mongo(collection = "custy", url = "mongodb+srv://rgraue:LoopDLoop@geoffcluster-3sd9t.azure.mongodb.net/report")
item <- mongo(collection = "item", url = "mongodb+srv://rgraue:LoopDLoop@geoffcluster-3sd9t.azure.mongodb.net/report")
# organizes mongodb enviroments into r dataframes
sale_data <- sale$find()
custy_data <- custy$find()
item_data <- item$find()
} else {
}
write.csv("sales_data", file = sale_data, row.names = F)
setwd("C:/Users/graue/projects/internship/internship-proposal/scripts")
write.csv(sale_data, file = "../files/sales_data.csv" row.names = F)
write.csv(sale_data, file = "../files/sales_data.csv", row.names = F)
write.csv(custy_data, file = "../files/customer_data.csv", row.names = F)
write.csv(item_data, file = "../files/items_data.csv", row.names = F)
runApp('C:/Users/graue/projects/internship/internship-proposal')
sale_data <- read.csv("../files/sales_data.csv", stringsAsFactors = F)
custy_data <- read.csv("../files/customer_data.csv", stringsAsFactors = F)
item_data <- read.csv("../files/items_data.csv", stringsAsFactors = F)
runApp('C:/Users/graue/projects/internship/internship-proposal')
runApp('C:/Users/graue/projects/internship/internship-proposal')
library(knitr)
library(dplyr)
library(tidyverse)
library(plotly)
library(anchors)
library(kableExtra)
source("../scripts/mock_report.R")
library(knitr)
library(dplyr)
library(tidyverse)
library(plotly)
library(anchors)
library(kableExtra)
source("scripts/mock_report.R")
library(knitr)
library(dplyr)
library(tidyverse)
library(plotly)
library(anchors)
library(kableExtra)
source("../scripts/mock_report.R")
library(knitr)
library(dplyr)
library(tidyverse)
library(plotly)
library(anchors)
library(kableExtra)
source("../scripts/mock_report.R")
runApp('C:/Users/graue/projects/internship/internship-proposal')
runApp('C:/Users/graue/projects/internship/internship-proposal')
library(knitr)
library(dplyr)
library(tidyverse)
library(plotly)
library(anchors)
library(kableExtra)
source("../scripts/mock_report.R")
library(mongolite)
library(dplyr)
library(plotly)
connected <- !as.logical(system(paste("ping","google.com")))
# retrieves data from mongdb database if connected
if (connected) {
sale <- mongo(collection = "sale", url = "mongodb+srv://rgraue:LoopDLoop@geoffcluster-3sd9t.azure.mongodb.net/report")
custy <- mongo(collection = "custy", url = "mongodb+srv://rgraue:LoopDLoop@geoffcluster-3sd9t.azure.mongodb.net/report")
item <- mongo(collection = "item", url = "mongodb+srv://rgraue:LoopDLoop@geoffcluster-3sd9t.azure.mongodb.net/report")
# organizes mongodb enviroments into r dataframes
sale_data <- sale$find()
custy_data <- custy$find()
item_data <- item$find()
}else{ # Retrieves local csv files if not inernet connection
sale_data <- read.csv("../files/sales_data.csv", stringsAsFactors = F)
custy_data <- read.csv("../files/customer_data.csv", stringsAsFactors = F)
item_data <- read.csv("../files/items_data.csv", stringsAsFactors = F)
}
matcher <- function() {
result <- c()
for (i in sale_data$item_id) {
result <- c(result, item_data["price"][which(i == item_data$item_id),])
}
return(result)
}
total_sales_per_item <- sale_data %>%
group_by(item_id) %>%
summarise(total = n()) %>%
mutate("prices" = item_data["price"][which(sale_data$item_id == item_data$item_id),]) %>%
mutate("total price" = total * prices)
total_sales <- total_sales_per_item %>%
summarise(sum(total_sales_per_item$`total price`)) %>%
pull()
total_sale_per_custy <- sale_data %>%
mutate("price" = matcher()) %>%
group_by(cust_id) %>%
summarise(sum(price))
n_sale_per_item <- sale_data %>%
group_by(item_id) %>%
summarise("total" = n())
item_sale_visual <- plot_ly(
data = total_sales_per_item,
x = ~item_id,
y = ~total,
type = "bar",
marker = list(color = 'rgb(0,132,0)',
line = list(color = 'rgb(8,48,107)',
width = 1.5))
) %>%
layout(
title = "Number of sales per Item",
xaxis = list(title = "Item EB code"),
yaxis = list(title = "NUmber of items sold")
)
setwd("C:/Users/graue/projects/internship/internship-proposal")
runApp()
runApp()
runApp()
library(knitr)
library(dplyr)
library(tidyverse)
library(plotly)
library(anchors)
library(kableExtra)
source("../scripts/mock_report.R")
runApp()
runApp()
runApp()
runApp()
